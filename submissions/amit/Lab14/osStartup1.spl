//load module7
loadi(54, 67);
loadi(55, 68);

//load module5(scheduler)
loadi(50,63);
loadi(51,64);

//load idle process
loadi(69, 11);
loadi(70, 12);

print "osStatup";

//set SP to point to kernel stack
SP = (82*512) - 1;
print "SP set";

//call pushes IP on top of kernel stack
call MOD_7;

//set up pageTable for idle process
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//Set up page table entry for idle process
//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//logical page 2 and 3 for heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//logical page 4,5,6,7 for  code
[PTBR + 8] = 69;
[PTBR + 9] = "0100";
[PTBR + 10] = 70;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1';
[PTBR + 15] = "0000";

//logical page 8 and 9 for stack
[PTBR + 16] = 81;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

//Set up process table
[PROCESS_TABLE + 14] = PTBR;
[PROCESS_TABLE + 15] = PTLR; 
[PROCESS_TABLE + 1] = 0;
[PROCESS_TABLE + 13] = 8*512;
[PROCESS_TABLE + 12] = 0;
[PROCESS_TABLE + 11] = 82;

//set idle process as running
[PROCESS_TABLE + 4] = RUNNING;

//set up system status table
[SYSTEM_STATUS_TABLE + 1] = 0;

[81 * 512] = [69 * 512 + 1];

SP = 8*512;
//go to user mode
print "IDLE process";
ireturn;
