print "module7";
//load module0(Terminal Handling)
loadi(40, 53);
loadi(41, 54);
//load module4(device manager)
loadi(48, 61);
loadi(49, 62);
//load printEvenProgram to memory page83
loadi(83, 69);
//load printPrimeProgram to memory page 89
loadi(89, 70);
//load init program
loadi(65, 7);
loadi(66, 8);

//load library module
loadi(63, 13);
loadi(64, 14);

//load INT10 program(exit program)
loadi(22, 35);
loadi(23, 36);

//load exception handler
loadi(2, 15);
loadi(2, 16);

//load timer interrupt
loadi(4, 17);
loadi(5, 18);

//load INT7 (write interrupt)
loadi(16, 29);
loadi(17, 30);

//=================================================
//Set up init program(printOdd)
//Set page Table register
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//set up page table entry for init
//logical page 0 and 1 for library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//logical page 2 and 3 for heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

//logical page 4,5,6,7 for  code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1';
[PTBR + 15] = "0000";

//logical page 8 and 9 for stack
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

//set up process table for init process
[PROCESS_TABLE + 16 + 14] = PTBR;
[PROCESS_TABLE + 16 + 15] = PTLR;
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 11] = 80;

//set init process as created
[PROCESS_TABLE + 16 + 4] = CREATED;

[76 * 512] = [65 * 512 + 1];
//==================================================
//SETUP PRINT EVEN PROGRAM MEMORY
PTBR = PAGE_TABLE_BASE + 40;
[PROCESS_TABLE + 32 + 14] = PTBR;
[PROCESS_TABLE + 32 + 15] = PTLR;
[PROCESS_TABLE + 32 + 1] = 2;
[PROCESS_TABLE + 32 + 13] = 8*512;
[PROCESS_TABLE + 32 + 12] = 0; 
//user page area
[PROCESS_TABLE + 32 + 11] = 84;

//set up page table entry
//logical page 0 and 1 for library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//logical page 2 and 3 for heap
[PTBR + 4] = 85;
[PTBR + 5] = "0110";
[PTBR + 6] = 86;
[PTBR + 7] = "0110";

//logical page 4,5,6,7 for  code
[PTBR + 8] = 83;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1';
[PTBR + 15] = "0000";

//logical page 8 and 9 for stack
[PTBR + 16] = 87;
[PTBR + 17] = "0110";
[PTBR + 18] = 88;
[PTBR + 19] = "0110";

//set print even process as created
[PROCESS_TABLE + 32 + 4] = CREATED;

[87 * 512] = [83 * 512 + 1];

//==============================================
//Set up printPrime
PTBR = PAGE_TABLE_BASE + 60;
[PROCESS_TABLE + 48 + 14] = PTBR;
[PROCESS_TABLE + 48 + 15] = PTLR;
[PROCESS_TABLE + 48 + 1] = 3;
[PROCESS_TABLE + 48 + 13] = 8*512;
[PROCESS_TABLE + 48 + 12] = 0; 
//user page area
[PROCESS_TABLE + 48 + 11] = 92;

//set up page table entry
//logical page 0 and 1 for library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//logical page 2 and 3 for heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//logical page 4,5,6,7 for  code
[PTBR + 8] = 89;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1';
[PTBR + 15] = "0000";

//logical page 8 and 9 for stack
[PTBR + 16] = 90;
[PTBR + 17] = "0110";
[PTBR + 18] = 91;
[PTBR + 19] = "0110";

//set print even process as created
[PROCESS_TABLE + 48 + 4] = CREATED;

[90 * 512] = [89 * 512 + 1];
//=====================================================

//First 4 process table entries are occupied.
//initialize state fiels of all other process as terminated
[PROCESS_TABLE + (16*4) + 4] = TERMINATED;
[PROCESS_TABLE + (16*5) + 4] = TERMINATED;
[PROCESS_TABLE + (16*6) + 4] = TERMINATED;
[PROCESS_TABLE + (16*7) + 4] = TERMINATED;
[PROCESS_TABLE + (16*8) + 4] = TERMINATED;
[PROCESS_TABLE + (16*9) + 4] = TERMINATED;
[PROCESS_TABLE + (16*10) + 4] = TERMINATED;
[PROCESS_TABLE + (16*11) + 4] = TERMINATED;
[PROCESS_TABLE + (16*12) + 4] = TERMINATED;
[PROCESS_TABLE + (16*13) + 4] = TERMINATED;
[PROCESS_TABLE + (16*14) + 4] = TERMINATED;
[PROCESS_TABLE + (16*15) + 4] = TERMINATED;

return;
