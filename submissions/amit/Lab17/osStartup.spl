//loading the idle process
loadi(69 , 11);
loadi(70 , 12);

//this is to load the module 7
loadi(54 , 67);
loadi(55 , 68);



//user page area of the idle process
//[PROCESS_TABLE + 11] = 82;

//setting the SP to the user page number of the idle process
SP = 82 * 512 - 1;

//this is to call the boot module 
//print "hi";
call MOD_7;

//the following piece of code will be executed after the returning from the boot module

//this is to load the page table of the idle process
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64 ;
[PTBR + 3] = "0100";

//heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//Code
[PTBR + 8] = 69;
[PTBR + 9] = "0100";
[PTBR + 10] = 70;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 81;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";


//now this is to deal with the process table entries
[PROCESS_TABLE + 1] = 0;

//state of the idle process set to created
[PROCESS_TABLE + 4] = RUNNING;

//user page area of the idle process
[PROCESS_TABLE + 11] = 82;

//this is to set the stack pointer of the idle process UTPR
[PROCESS_TABLE + 13] = 8 * 512;
//set the KTPR field for the idle process
[PROCESS_TABLE + 12] = 0;

//this is to set the PTBR and PTLR for the idle process
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE;
[PROCESS_TABLE + 15] = 10;

[SYSTEM_STATUS_TABLE + 1] =0;

[81 * 512] = [69 * 512 + 1];
SP = 8 * 512;
ireturn;