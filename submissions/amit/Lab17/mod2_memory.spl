alias functionNum R1;
alias currentPID R2;

//this one is the get free page
if (functionNum == 1) then
    //increment the wait mem count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3 ] + 1;


    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        
        [PROCESS_TABLE + 16 * currentPID + 4] = WAIT_MEM;
        multipush (R0 , R1 , R2 , R3);
        call MOD_5;                 //for the scheduler
        multipop (R0 , R1 , R2, R3);
    endwhile;

    //decrement the wait_mem i.e number of processes in wait_mem state
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;        //this is for the mem_free_count

    alias counter R4;                //for accessing the elements of the process
    counter = 76;

    while (counter < 128) do
        
        if ([MEMORY_FREE_LIST + counter] == 0 ) then
            break;
        endif;
        counter = counter + 1;
    endwhile;

    [MEMORY_FREE_LIST + counter] = 1;
    R0 = counter;
    return;

endif;

//Release page
if (functionNum == 2) then
    alias released_page R2;
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    if ([MEMORY_FREE_LIST + R2] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;   //mem_free_count
    endif; 

    alias process_number R3;
    process_number = 1;
    while (process_number < 16) do
        if ([PROCESS_TABLE + 16 * process_number + 4] == WAIT_MEM) then
            [PROCESS_TABLE + 16 * process_number + 4] = READY;
        endif;
        process_number = process_number + 1;
    endwhile;

    return;

else 

    return;
endif;
